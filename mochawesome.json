{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-25T22:28:46.066Z",
    "end": "2025-07-25T22:28:46.110Z",
    "duration": 44,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "06958695-4f13-417b-ad50-f86549ed9ac9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "resetUsuarios();",
          "err": {},
          "uuid": "67ef23c6-1e33-4ce2-bbdd-b1883652ebe2",
          "parentUUID": "06958695-4f13-417b-ad50-f86549ed9ac9",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "resetUsuarios();",
          "err": {},
          "uuid": "e42f509e-3fbf-48d5-8116-9b22170728c2",
          "parentUUID": "06958695-4f13-417b-ad50-f86549ed9ac9",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "97144352-f9e7-4b07-8f8e-8c61bd1fd220",
          "title": "Login",
          "fullFile": "/home/runner/work/api-login-desafio3/api-login-desafio3/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7759fc0c-4241-45b3-8c97-59afd1edfda0",
              "title": "POST /login",
              "fullFile": "/home/runner/work/api-login-desafio3/api-login-desafio3/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com um token em string e a mensagem \"Login realizado com sucesso\" quando eu fizer login com um usuário válido",
                  "fullTitle": "Login POST /login Deve retornar 200 com um token em string e a mensagem \"Login realizado com sucesso\" quando eu fizer login com um usuário válido",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': '123456'\n    })\n    expect(response.status).to.equal(200)\n    expect(response.body.message).to.equal('Login realizado com sucesso!')\n    expect(response.body.token).to.be.a('string')",
                  "err": {},
                  "uuid": "1c1c37d2-2f51-4373-98cf-2c14310a8d1c",
                  "parentUUID": "7759fc0c-4241-45b3-8c97-59afd1edfda0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu inserir um usuario e senha inválidos",
                  "fullTitle": "Login POST /login Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu inserir um usuario e senha inválidos",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n.post('/login')\n.set('Content-Type', 'application/json')\n.send({\n    'usuario': 'Random',\n    'senha': '654321'\n})\nexpect(response.status).to.equal(401)\nexpect(response.body.message).to.equal('Credenciais inválidas')",
                  "err": {},
                  "uuid": "6046b708-b104-4668-9143-8f10ad2b24e5",
                  "parentUUID": "7759fc0c-4241-45b3-8c97-59afd1edfda0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 e a mensagem \"Senha bloqueada após exceder o limite de 3 tentativas.\" quando eu inserir um usuário válido com uma senha incorreta 3 vezes",
                  "fullTitle": "Login POST /login Deve retornar 401 e a mensagem \"Senha bloqueada após exceder o limite de 3 tentativas.\" quando eu inserir um usuário válido com uma senha incorreta 3 vezes",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1ª tentativa\nawait request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': 'senhaerrada1'\n    });\n// 2ª tentativa\nawait request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': 'senhaerrada2'\n    });\n// 3ª tentativa\nconst response = await request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': 'senhaerrada3'\n    });\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal('Senha bloqueada após exceder o limite de 3 tentativas.');",
                  "err": {},
                  "uuid": "f40ef3dd-6ebf-4ca9-ae5c-d9a4a551c202",
                  "parentUUID": "7759fc0c-4241-45b3-8c97-59afd1edfda0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c1c37d2-2f51-4373-98cf-2c14310a8d1c",
                "6046b708-b104-4668-9143-8f10ad2b24e5",
                "f40ef3dd-6ebf-4ca9-ae5c-d9a4a551c202"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09ae1438-1980-459d-ba5e-30478de06b16",
          "title": "POST /resetar-senha",
          "fullFile": "/home/runner/work/api-login-desafio3/api-login-desafio3/test/resetarSenha.test.js",
          "file": "/test/resetarSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar 200 e a mensagem \"Senha resetada com sucesso\"",
              "fullTitle": "POST /resetar-senha Deve retornar 200 e a mensagem \"Senha resetada com sucesso\"",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/resetar-senha')\n  .send({ usuario: 'Matheus', novaSenha: 'novaSenha123' });\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.match(/resetada/);\nconst user = usuarios.find(u => u.usuario === 'Matheus');\nexpect(user.senha).to.equal('novaSenha123');\nexpect(user.tentativas).to.equal(0);\nexpect(user.bloqueado).to.be.false;",
              "err": {},
              "uuid": "91cde73f-ee87-440f-b13d-d66b2979f3a6",
              "parentUUID": "09ae1438-1980-459d-ba5e-30478de06b16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu tentar resetar a senha de um usuário inexistente",
              "fullTitle": "POST /resetar-senha Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu tentar resetar a senha de um usuário inexistente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/resetar-senha')\n  .send({ usuario: 'Yuri', novaSenha: 'qualquer' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.match(/credenciais/i);",
              "err": {},
              "uuid": "d287916b-7689-4f8f-ae63-95e90e1dd541",
              "parentUUID": "09ae1438-1980-459d-ba5e-30478de06b16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91cde73f-ee87-440f-b13d-d66b2979f3a6",
            "d287916b-7689-4f8f-ae63-95e90e1dd541"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}