{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-25T21:46:38.196Z",
    "end": "2025-07-25T21:46:38.244Z",
    "duration": 48,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3915f78e-432c-49b3-9cd6-a1e65735ca4b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "resetUsuarios();",
          "err": {},
          "uuid": "126e71ba-6a5c-48cb-9ab8-00bb5fbda8c9",
          "parentUUID": "3915f78e-432c-49b3-9cd6-a1e65735ca4b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "resetUsuarios();",
          "err": {},
          "uuid": "3ea344a8-0004-421a-bcf0-7f5972e068c6",
          "parentUUID": "3915f78e-432c-49b3-9cd6-a1e65735ca4b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f60cfc9a-e863-45e0-bfe8-2d3a1f930b2f",
          "title": "Login",
          "fullFile": "/home/runner/work/api-login-desafio3/api-login-desafio3/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ebf0e88a-789e-421d-874c-6dfb61a2b026",
              "title": "POST /login",
              "fullFile": "/home/runner/work/api-login-desafio3/api-login-desafio3/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com um token em string e a mensagem \"Login realizado com sucesso\" quando eu fizer login com um usuário válido",
                  "fullTitle": "Login POST /login Deve retornar 200 com um token em string e a mensagem \"Login realizado com sucesso\" quando eu fizer login com um usuário válido",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': '123456'\n    })\n    expect(response.status).to.equal(200)\n    expect(response.body.message).to.equal('Login realizado com sucesso!')\n    expect(response.body.token).to.be.a('string')",
                  "err": {},
                  "uuid": "ef67f87b-b1e7-4efc-b8af-cc6c80b49c68",
                  "parentUUID": "ebf0e88a-789e-421d-874c-6dfb61a2b026",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu inserir um usuario e senha inválidos",
                  "fullTitle": "Login POST /login Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu inserir um usuario e senha inválidos",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n.post('/login')\n.set('Content-Type', 'application/json')\n.send({\n    'usuario': 'Random',\n    'senha': '654321'\n})\nexpect(response.status).to.equal(401)\nexpect(response.body.message).to.equal('Credenciais inválidas')",
                  "err": {},
                  "uuid": "896e055e-d87f-48a0-9ae6-af082facd2bf",
                  "parentUUID": "ebf0e88a-789e-421d-874c-6dfb61a2b026",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 e a mensagem \"Senha bloqueada após exceder o limite de 3 tentativas.\" quando eu inserir um usuário válido com uma senha incorreta 3 vezes",
                  "fullTitle": "Login POST /login Deve retornar 401 e a mensagem \"Senha bloqueada após exceder o limite de 3 tentativas.\" quando eu inserir um usuário válido com uma senha incorreta 3 vezes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1ª tentativa\nawait request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': 'senhaerrada1'\n    });\n// 2ª tentativa\nawait request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': 'senhaerrada2'\n    });\n// 3ª tentativa\nconst response = await request(app)\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'usuario': 'Matheus',\n        'senha': 'senhaerrada3'\n    });\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal('Senha bloqueada após exceder o limite de 3 tentativas.');",
                  "err": {},
                  "uuid": "a4e30b3f-3d25-4c32-9d2c-50c643d3d61c",
                  "parentUUID": "ebf0e88a-789e-421d-874c-6dfb61a2b026",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef67f87b-b1e7-4efc-b8af-cc6c80b49c68",
                "896e055e-d87f-48a0-9ae6-af082facd2bf",
                "a4e30b3f-3d25-4c32-9d2c-50c643d3d61c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b9735ad-0723-481b-a6d4-e64954f24eaa",
          "title": "POST /resetar-senha",
          "fullFile": "/home/runner/work/api-login-desafio3/api-login-desafio3/test/resetarSenha.test.js",
          "file": "/test/resetarSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar 200 e a mensagem \"Senha resetada com sucesso\"",
              "fullTitle": "POST /resetar-senha Deve retornar 200 e a mensagem \"Senha resetada com sucesso\"",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/resetar-senha')\n  .send({ usuario: 'Matheus', novaSenha: 'novaSenha123' });\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.match(/resetada/);\nconst user = usuarios.find(u => u.usuario === 'Matheus');\nexpect(user.senha).to.equal('novaSenha123');\nexpect(user.tentativas).to.equal(0);\nexpect(user.bloqueado).to.be.false;",
              "err": {},
              "uuid": "3c270254-5e24-46ef-af46-1359b3ef1694",
              "parentUUID": "4b9735ad-0723-481b-a6d4-e64954f24eaa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu tentar resetar a senha de um usuário inexistente",
              "fullTitle": "POST /resetar-senha Deve retornar 401 e a mensagem \"Credenciais inválidas\" quando eu tentar resetar a senha de um usuário inexistente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/resetar-senha')\n  .send({ usuario: 'Yuri', novaSenha: 'qualquer' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.match(/credenciais/i);",
              "err": {},
              "uuid": "80a88df9-4d0a-4cf8-baa2-ae03708d8441",
              "parentUUID": "4b9735ad-0723-481b-a6d4-e64954f24eaa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c270254-5e24-46ef-af46-1359b3ef1694",
            "80a88df9-4d0a-4cf8-baa2-ae03708d8441"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}